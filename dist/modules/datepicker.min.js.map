{"version":3,"sources":["datepicker.min.js","datepicker/datepicker.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","placement","template","trigger","container","keyboard","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","$get","$window","$document","$rootScope","$sce","$dateFormatter","datepickerViews","$tooltip","$timeout","DatepickerFactory","element","controller","config","updateSelected","el","selected","$datepicker","$isSelected","date","focusElement","focus","extend","parentScope","scope","options","$options","$scope","pickerViews","$views","views","viewDate","$mode","$iconLeft","$iconRight","$picker","$select","select","$selectPane","value","$toggleMode","setMode","length","update","isDate","isNaN","getTime","$date","call","$build","updateDisabledDates","dateRanges","disabledDateRanges","i","l","rows","forEach","$setDisabledEl","keep","$dateValue","Date","$setViewValue","copy","$render","hide","year","getFullYear","month","getMonth","getDate","mode","pristine","built","build","$updateSelected","isSelected","disabled","isDisabled","steps","targetDate","UTC","getUTCFullYear","getUTCMonth","getUTCDate","$onMouseDown","evt","preventDefault","stopPropagation","isTouch","targetEl","target","nodeName","toLowerCase","parent","triggerHandler","$onKeyDown","test","keyCode","shiftKey","altKey","$apply","onKeyDown","$digest","_init","init","isNative","prop","css","attr","on","_destroy","destroy","off","_show","show","$isShown","$element","_hide","blur","document","body","navigator","userAgent","lang","getDefaultLocale","directive","$parse","$q","$dateParser","restrict","require","link","normalizeDateRanges","ranges","validateAgainstMinMaxDate","parsedDate","isMinValid","datepicker","isMaxValid","isValid","$setValidity","getDateFormattedString","formatDate","key","isDefined","bsShow","$watch","newValue","oldValue","isString","match","format","dateParser","strict","$observe","getDateForAttribute","ngModel","disabledDates","disabledRanges","previousValue","$parsers","unshift","viewValue","parse","$viewValue","timezoneOffsetAdjust","toISOString","$formatters","push","modelValue","isUndefined","NaN","val","$on","split","arr","size","arrays","splice","mod","n","m","daySplit","picker","weekDaysMin","weekdaysShort","weekDaysLabels","slice","concat","weekDaysLabelsHtml","trustAsHtml","join","startDate","force","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","getDay","firstDateOffset","today","toDateString","day","days","daylightSavingAdjust","isToday","label","muted","title","showLabels","labels","time","setHours","setMinutes","setSeconds","setMilliseconds","indexOf","start","end","newDate","actualTime","name","months","lastDate","actualMonth","setMonth","parseInt","firstYear","years","actualYear","setYear","Array","prototype"],"mappings":"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","file":"datepicker.min.js","sourcesContent":["/**\n * angular-strap\n * @version v2.2.1 - 2015-11-27\n * @link http://mgcrea.github.io/angular-strap\n * @author Olivier Louvignes (olivier@mg-crea.com)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      template: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"$sce\", \"$dateFormatter\", \"datepickerViews\", \"$tooltip\", \"$timeout\", function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if(options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function(date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function(date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if(!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if(options.autoclose && !keep) {\n              $timeout(function() { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function(mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function(pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if(pristine === true && $picker.built) return;\n          if(pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function() {\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if(evt.keyCode === 13) {\n            if(!scope.$mode) {\n              return $datepicker.hide(true);\n            } else {\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n            }\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // if $datepicker is no longer showing, don't setup events\n            if(!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if(!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    }];\n\n  })\n\n  .directive('bsDatepicker', [\"$window\", \"$parse\", \"$q\", \"$dateFormatter\", \"$dateParser\", \"$datepicker\", function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    var defaults = $datepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!datepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          newValue === true ? datepicker.show() : datepicker.hide();\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            // Build only if dirty\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$viewValue);\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxDate(parsedDate);\n          }\n\n          if(options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if(options.dateType === 'number') {\n            return date.getTime();\n          } else if(options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if(options.dateType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if(options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  }])\n\n  .provider('datepickerViews', function() {\n\n    var defaults = this.defaults = {\n      dayFormat: 'dd',\n      daySplit: 7\n    };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while(arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = [\"$dateFormatter\", \"$dateParser\", \"$sce\", function($dateFormatter, $dateParser, $sce) {\n\n      return function(picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n            format: options.dayFormat,\n            split: 7,\n            steps: { month: 1 },\n            update: function(date, force) {\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getDate() !== viewDate.date) {\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n              var days = [], day;\n              for(var i = 0; i < 42; i++) { // < 7 * 6\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function(date) {\n              var time = date.getTime();\n\n                var maxDate = new Date(options.maxDate),\n                    minDate = new Date(options.minDate);\n\n                minDate.setHours(0);\n                minDate.setMinutes(0);\n                minDate.setSeconds(0);\n                minDate.setMilliseconds(0);\n                maxDate.setHours(0);\n                maxDate.setMinutes(0);\n                maxDate.setSeconds(0);\n                maxDate.setMilliseconds(0);\n\n                options.minDate = minDate.getTime();\n                options.maxDate = maxDate.getTime();\n\n              // Disabled because of min/max date.\n              if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: { year: 1 },\n            update: function(date, force) {\n              if(!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstMonth = new Date(viewDate.year, 0, 1);\n              var months = [], month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: { year: 12 },\n            update: function(date, force) {\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [], year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear(),\n                  newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    }];\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      template: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if(options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function(date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function(date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if(!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if(options.autoclose && !keep) {\n              $timeout(function() { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function(mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function(pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if(pristine === true && $picker.built) return;\n          if(pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function() {\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if(evt.keyCode === 13) {\n            if(!scope.$mode) {\n              return $datepicker.hide(true);\n            } else {\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n            }\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // if $datepicker is no longer showing, don't setup events\n            if(!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if(!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    var defaults = $datepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!datepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          newValue === true ? datepicker.show() : datepicker.hide();\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            // Build only if dirty\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$viewValue);\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxDate(parsedDate);\n          }\n\n          if(options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if(options.dateType === 'number') {\n            return date.getTime();\n          } else if(options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if(options.dateType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if(options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function() {\n\n    var defaults = this.defaults = {\n      dayFormat: 'dd',\n      daySplit: 7\n    };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while(arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function($dateFormatter, $dateParser, $sce) {\n\n      return function(picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n            format: options.dayFormat,\n            split: 7,\n            steps: { month: 1 },\n            update: function(date, force) {\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getDate() !== viewDate.date) {\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n              var days = [], day;\n              for(var i = 0; i < 42; i++) { // < 7 * 6\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function(date) {\n              var time = date.getTime();\n\n                var maxDate = new Date(options.maxDate),\n                    minDate = new Date(options.minDate);\n\n                minDate.setHours(0);\n                minDate.setMinutes(0);\n                minDate.setSeconds(0);\n                minDate.setMilliseconds(0);\n                maxDate.setHours(0);\n                maxDate.setMinutes(0);\n                maxDate.setSeconds(0);\n                maxDate.setMilliseconds(0);\n\n                options.minDate = minDate.getTime();\n                options.maxDate = maxDate.getTime();\n\n              // Disabled because of min/max date.\n              if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: { year: 1 },\n            update: function(date, force) {\n              if(!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstMonth = new Date(viewDate.year, 0, 1);\n              var months = [], month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: { year: 12 },\n            update: function(date, force) {\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [], year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear(),\n                  newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}