{"version":3,"sources":["button.min.js","button/button.js"],"names":["angular","module","provider","defaults","this","activeClass","toggleEvent","$get","directive","restrict","require","compile","element","attr","removeAttr","children","querySelectorAll","forEach","child","childEl","ngModel","$button","$$rAF","constantValueRegExp","link","scope","controller","options","isInput","nodeName","activeElement","parent","trueValue","isDefined","test","$eval","falseValue","hasExoticValues","$parsers","push","viewValue","$formatters","modelValue","equals","$watch","newValue","oldValue","$render","isActive","$modelValue","checked","toggleClass","bind","$apply","$setViewValue","hasClass","value","$observe","v"],"mappings":"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","file":"button.min.js","sourcesContent":[null,"'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function() {\n\n    var defaults = this.defaults = {\n      activeClass:'active',\n      toggleEvent:'click'\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if(constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if(constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if(hasExoticValues) {\n          controller.$parsers.push(function(viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function(modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n             return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if(!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if(!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function(child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function(v) {\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}