{"version":3,"sources":["parse-options.min.js","helpers/parse-options.js"],"names":["angular","module","provider","defaults","this","regexp","$get","$parse","$q","ParseOptionsFactory","attr","config","parseValues","values","scope","map","match","index","label","value","locals","valueName","displayFn","valueFn","$parseOptions","options","extend","$values","keyName","groupByFn","valuesFn","init","$match","controller","when","then","displayValue","modelValue"],"mappings":"AAOA,YAEAA,SAAQC,OAAO,0CAEZC,SAAS,gBAAiB,WAEzB,GAAIC,GAAWC,KAAKD,UAClBE,OCAM,+KDGRD,MCAIE,MAAI,SAAU,KAAQ,SAAWC,EAAAC,GDEnC,QAASC,GAAoBC,EAAMC,GAqCjC,QAASC,GAAYC,EAAQC,GAC3B,MAAOD,GAAOE,IAAI,SAASC,EAAOC,GAChC,GAAiBC,GAAOC,EAApBC,IAIJ,OCHJA,GAAAC,GAAcL,EACdE,EAAOI,EAAAR,EAAAM,GDCHD,EAAQI,EAAQT,EAAOM,IACfF,MAAOA,EAAOC,MAAOA,EAAOF,MAAOA,KCzC/C,GAAIO,MAGFC,EAAAzB,QAAc0B,UAAiBvB,EAAKQ,EDCtCa,GCAcG,UDGd,ICAEX,GAAAM,EAAmBD,EAAYO,EAAAC,EAAAN,EAAAO,CDuCjC,OArCAN,GCAaO,KAAO,WDClBP,EAAcQ,OAAShB,EAAQN,EAAKM,MAAMS,EAAQpB,QAClDiB,EAAYf,EAAOS,EAAM,IAAMA,EAAM,ICCvCK,EAAcL,EAAA,IAAWA,EAAA,GACvBY,EAAUZ,EAAK,GDCfa,ECAMtB,EAASS,EAAQ,IAAA,IDCvBO,ECAEhB,EAAcS,EAAA,GAAUA,EAAA,GAASK,GDCnCS,ECASvB,EAAAS,EAAc,KDGzBQ,EAAcM,SAAW,SAAShB,EAAOmB,GCCzC,MAAAzB,GAAA0B,KAAcJ,EAAAhB,EAAemB,IAC3BE,KAAI,SAAQtB,GAEZ,MADAW,GAAMG,QAAad,EAAAD,EAAAC,EAAAC,MACZU,EAAUG,WDInBH,EAAcY,aAAe,SAASC,GCCtC,GAAAvB,KDEE,OCDAA,GAAAO,GAAkBgB,EACZf,EAASR,IDejBU,EAAcO,OACPP,EAIT,MAAOf","file":"parse-options.min.js","sourcesContent":[null,"'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            $parseOptions.$values = values ? parseValues(values, scope) : {};\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function(modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}