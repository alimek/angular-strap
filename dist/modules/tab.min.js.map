{"version":3,"sources":["tab.min.js","tab/tab.js"],"names":["angular","module","provider","defaults","this","animation","template","navClass","activeClass","controller","$scope","$element","$attrs","self","$options","copy","forEach","key","isDefined","$navClass","$activeClass","$panes","$activePaneChangeListeners","$viewChangeListeners","$push","pane","push","$remove","index","indexOf","activeIndex","$active","splice","length","$setActive","value","fn","$get","$tab","directive","$window","$animate","$parse","require","transclude","scope","templateUrl","element","attr","link","attrs","controllers","ngModelCtrl","bsTabsCtrl","console","warn","$setViewValue","$formatters","modelValue","bsActivePane","parsedBsActivePane","assign","$watch","newValue","oldValue","$sce","render","active","addClass","$observe","title","trustAsHtml","disabled","$eval","$on"],"mappings":"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","file":"tab.min.js","sourcesContent":[null,"'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // DEPRECATED: $viewChangeListeners, please use $activePaneChangeListeners\n      // Because we deprecated ngModel usage, we rename viewChangeListeners to \n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function(pane) {\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function(pane) {\n        var index = self.$panes.indexOf(pane);\n        var activeIndex = self.$panes.$active;\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to \n          // decrement the active pane index\n          activeIndex--;\n        }\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        self.$setActive(activeIndex);\n      };\n\n      self.$panes.$active = 0;\n      self.$setActive = $scope.$setActive = function(value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n    };\n\n    this.$get = function() {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function(element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // DEPRECATED: ngModel, please use bsActivePane\n        // 'ngModel' is deprecated bacause if interferes with form validation\n        // and status, so avoid using it here.\n        if(ngModelCtrl) {\n          console.warn('Usage of ngModel is deprecated, please use bsActivePane instead!');\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue * 1);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue * 1);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function(newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Add animation class\n        if(bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function(newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function() {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          var active = bsTabsCtrl.$panes.$active;\n          $animate[index === active ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}