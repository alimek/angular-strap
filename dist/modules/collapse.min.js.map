{"version":3,"sources":["collapse.min.js","collapse/collapse.js"],"names":["angular","module","provider","defaults","this","animation","disallowToggle","activeClass","startCollapsed","allowMultiple","controller","$scope","$element","$attrs","fixActiveItemIndexes","index","activeIndexes","self","$targets","$active","i","length","isActive","value","activeItems","indexOf","deactivateItem","splice","activateItem","$options","push","copy","forEach","key","isDefined","$toggles","$viewChangeListeners","$registerToggle","element","$registerTarget","$unregisterToggle","$unregisterTarget","fn","$setActive","isArray","$activeIndexes","$get","$collapse","directive","$window","$animate","require","link","scope","attrs","controllers","ngModelCtrl","bsCollapseCtrl","$setViewValue","$formatters","modelValue","attr","$on","on","bsCollapseToggle","$apply","render","active","action","addClass"],"mappings":"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","file":"collapse.min.js","sourcesContent":[null,"'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = angular.copy(value);\n        }\n        else if(!self.$options.disallowToggle) {\n          // toogle element active status\n          isActive(value) ? deactivateItem(value) : activateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        return self.$options.allowMultiple ? self.$targets.$active :\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    var defaults = $collapse.defaults;\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            }\n            else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              }\n              else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function() {\n          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          }\n          else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}